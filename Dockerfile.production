###########################################
# Build frontend assets with NPM
###########################################

ARG NODE_VERSION=20-alpine

FROM node:${NODE_VERSION} AS build

ENV ROOT=/var/www/html

WORKDIR ${ROOT}

RUN npm config set update-notifier false && npm set progress=false

COPY --link package*.json ./

RUN if [ -f $ROOT/package-lock.json ]; \
    then \
    npm ci --loglevel=error --no-audit; \
    else \
    npm install --loglevel=error --no-audit; \
    fi

COPY --link . .

RUN npm run build

###########################################
# Set up PHP environment
###########################################

FROM dunglas/frankenphp

WORKDIR /app

RUN install-php-extensions \
    @composer \
    pcntl \
    opcache \
    apcu \
    memcached \
    redis
# Add other PHP extensions here...

ENV COMPOSER_ALLOW_SUPERUSER=1

# Be sure to replace "your-domain-name.example.com" by your domain name
# ENV SERVER_NAME=your-domain-name.example.com
# If you want to disable HTTPS, use this value instead:
ENV SERVER_NAME=:80

# Enable PHP production settings
# RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"

# Copy the application code
COPY . /app

# Copy the built frontend assets from the build stage
COPY --from=build /var/www/html/public/build /app/public/build

COPY deployment/php.ini /lib/php.ini

RUN rm -rf vendor \
    && composer install \
    --no-dev \
    --no-interaction \
    --no-ansi \
    --classmap-authoritative \
    --optimize-autoloader \
    --audit \
    && composer clear-cache \
    && composer dump-autoloader --optimize
